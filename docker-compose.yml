version: '3.3'
services:
  nginx:
    image: nginx:1.21.4
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx-conf:/etc/nginx/conf.d
      - /opt/docker-volumes/var/www/html:/var/www/html
      - /opt/docker-volumes/certbot/etc:/etc/letsencrypt
      - /opt/docker-volumes/certbot/var:/var/lib/letsencrypt
      - /opt/docker-volumes/dhparam:/etc/ssl/certs
    depends_on:
      - backend
  certbot:
    image: certbot/certbot
    volumes:
      - /opt/docker-volumes/var/www/html:/var/www/html
      - /opt/docker-volumes/certbot/etc:/etc/letsencrypt
      - /opt/docker-volumes/certbot/var:/var/lib/letsencrypt
    depends_on:
      - nginx
    command: certonly --webroot --webroot-path=/var/www/html --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email --force-renewal -v -d api.dungeon-diaries.xyz -d staging.api.dungeon-diaries.xyz
  backend:
    build: .
    container_name: backend
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET}
      - AWS_BUCKET=${AWS_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - postgres
      - redis
    expose:
      - ${PORT}
  staging:
    build: .
    container_name: staging
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET}
      - AWS_BUCKET=${AWS_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - postgres
      - redis
    expose:
      - ${PORT}
  postgres:
    image: postgres:14.1
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - /opt/docker-volumes/postgresql/data:/var/lib/postgresql/data
  redis:
    image: redis:6.2.6
    container_name: redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - 6379:6379
    volumes:
      - /opt/docker-volumes/redis/data:/data
